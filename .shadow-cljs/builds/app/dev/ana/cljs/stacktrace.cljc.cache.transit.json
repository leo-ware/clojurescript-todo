["^ ","~:output",["^ ","~:js","goog.provide('cljs.stacktrace');\nif((typeof cljs !== 'undefined') && (typeof cljs.stacktrace !== 'undefined') && (typeof cljs.stacktrace.parse_stacktrace !== 'undefined')){\n} else {\n/**\n * Parse a JavaScript stacktrace string into a canonical data form. The\n *   arguments:\n * \n *   repl-env - the repl environment, an optional map with :host and :port keys\n *           if the stacktrace includes url, not file references\n *   st       - the original stacktrace string to parse\n *   err      - an error map. :ua-product key defines the type of stacktrace parser\n *           to use, for example :chrome\n *   opts     - additional options. :output-dir maybe given in this argument if\n *           :host and :port do not apply, for example, a file path\n * \n *   The canonical stacktrace representation can easily be mapped to a\n *   ClojureScript one see mapped-stacktrace and mapped-stacktrace-str\n */\ncljs.stacktrace.parse_stacktrace = (function (){var method_table__4701__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4702__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4703__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4704__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4705__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__26518 = cljs.core.get_global_hierarchy;\nreturn (fexpr__26518.cljs$core$IFn$_invoke$arity$0 ? fexpr__26518.cljs$core$IFn$_invoke$arity$0() : fexpr__26518.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"cljs.stacktrace\",\"parse-stacktrace\"),(function (repl_env,st,err,opts){\nreturn new cljs.core.Keyword(null,\"ua-product\",\"ua-product\",938384227).cljs$core$IFn$_invoke$arity$1(err);\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4705__auto__,method_table__4701__auto__,prefer_table__4702__auto__,method_cache__4703__auto__,cached_hierarchy__4704__auto__));\n})();\n}\ncljs.stacktrace.parse_int = (function cljs$stacktrace$parse_int(s){\nreturn parseInt(s,(10));\n});\ncljs.stacktrace.starts_with_QMARK_ = (function cljs$stacktrace$starts_with_QMARK_(s0,s1){\nreturn goog.string.startsWith(s0,s1);\n});\ncljs.stacktrace.ends_with_QMARK_ = (function cljs$stacktrace$ends_with_QMARK_(s0,s1){\nreturn goog.string.endsWith(s0,s1);\n});\ncljs.stacktrace.string__GT_regex = (function cljs$stacktrace$string__GT_regex(s){\nreturn (new RegExp(s));\n});\ncljs.stacktrace.output_directory = (function cljs$stacktrace$output_directory(opts){\nvar or__4212__auto__ = new cljs.core.Keyword(null,\"output-dir\",\"output-dir\",-290956991).cljs$core$IFn$_invoke$arity$1(opts);\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn \"out\";\n}\n});\ncljs.stacktrace.parse_stacktrace.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (repl_env,st,err,opts){\nreturn st;\n}));\ncljs.stacktrace.parse_file_line_column = (function cljs$stacktrace$parse_file_line_column(flc){\nif(cljs.core.not(cljs.core.re_find(/:/,flc))){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [flc,null,null], null);\n} else {\nvar xs = clojure.string.split.cljs$core$IFn$_invoke$arity$2(flc,/:/);\nvar vec__26547 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p__26554,p__26555){\nvar vec__26559 = p__26554;\nvar pre = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26559,(0),null);\nvar post = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26559,(1),null);\nvar vec__26562 = p__26555;\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26562,(0),null);\nvar i = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26562,(1),null);\nif((i <= (2))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pre,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(post,x)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.conj.cljs$core$IFn$_invoke$arity$2(pre,x),post], null);\n}\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentVector.EMPTY,cljs.core.PersistentVector.EMPTY], null),cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,xs,cljs.core.range.cljs$core$IFn$_invoke$arity$3(cljs.core.count(xs),(0),(-1))));\nvar pre = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26547,(0),null);\nvar vec__26550 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26547,(1),null);\nvar line = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26550,(0),null);\nvar column = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26550,(1),null);\nvar file = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\":\",pre);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__26570 = file;\nif(cljs.stacktrace.starts_with_QMARK_(file,\"(\")){\nreturn clojure.string.replace(G__26570,\"(\",\"\");\n} else {\nreturn G__26570;\n}\n})(),cljs.stacktrace.parse_int((function (){var G__26573 = line;\nif(cljs.stacktrace.ends_with_QMARK_(line,\")\")){\nreturn clojure.string.replace(G__26573,\")\",\"\");\n} else {\nreturn G__26573;\n}\n})()),cljs.stacktrace.parse_int((function (){var G__26576 = column;\nif(cljs.stacktrace.ends_with_QMARK_(column,\")\")){\nreturn clojure.string.replace(G__26576,\")\",\"\");\n} else {\nreturn G__26576;\n}\n})())], null);\n}\n});\n/**\n * Given a browser file url convert it into a relative path that can be used\n * to locate the original source.\n */\ncljs.stacktrace.parse_file = (function cljs$stacktrace$parse_file(p__26581,file,p__26582){\nvar map__26583 = p__26581;\nvar map__26583__$1 = cljs.core.__destructure_map(map__26583);\nvar repl_env = map__26583__$1;\nvar host = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26583__$1,new cljs.core.Keyword(null,\"host\",\"host\",-1558485167));\nvar host_port = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26583__$1,new cljs.core.Keyword(null,\"host-port\",\"host-port\",1956551772));\nvar port = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26583__$1,new cljs.core.Keyword(null,\"port\",\"port\",1534937262));\nvar map__26584 = p__26582;\nvar map__26584__$1 = cljs.core.__destructure_map(map__26584);\nvar opts = map__26584__$1;\nvar asset_path = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26584__$1,new cljs.core.Keyword(null,\"asset-path\",\"asset-path\",1500889617));\nvar urlpat = (cljs.core.truth_(host)?cljs.stacktrace.string__GT_regex([\"http://\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(host),\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4212__auto__ = host_port;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn port;\n}\n})()),\"/\"].join('')):\"\");\nvar match = (cljs.core.truth_(host)?cljs.core.re_find(urlpat,file):cljs.core.contains_QMARK_(opts,new cljs.core.Keyword(null,\"output-dir\",\"output-dir\",-290956991)));\nif(cljs.core.truth_(match)){\nreturn clojure.string.replace(clojure.string.replace(file,urlpat,\"\"),cljs.stacktrace.string__GT_regex([\"^\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4212__auto__ = (function (){var and__4210__auto__ = asset_path;\nif(cljs.core.truth_(and__4210__auto__)){\nreturn clojure.string.replace(asset_path,/^\\//,\"\");\n} else {\nreturn and__4210__auto__;\n}\n})();\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn cljs.stacktrace.output_directory(opts);\n}\n})()),\"/\"].join('')),\"\");\n} else {\nvar temp__5751__auto__ = new cljs.core.Keyword(null,\"asset-root\",\"asset-root\",1771735072).cljs$core$IFn$_invoke$arity$1(opts);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar asset_root = temp__5751__auto__;\nreturn clojure.string.replace(file,asset_root,\"\");\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Could not relativize URL \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(file)].join(''),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"parse-stacktrace\",\"parse-stacktrace\",-38208461),new cljs.core.Keyword(null,\"reason\",\"reason\",-2070751759),new cljs.core.Keyword(null,\"relativize-url\",\"relativize-url\",621482324)], null));\n}\n}\n});\ncljs.stacktrace.chrome_st_el__GT_frame = (function cljs$stacktrace$chrome_st_el__GT_frame(repl_env,st_el,opts){\nvar xs = clojure.string.split.cljs$core$IFn$_invoke$arity$2(clojure.string.replace(st_el,/\\s+at\\s+/,\"\"),/\\s+/);\nvar vec__26601 = ((((1) === cljs.core.count(xs)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,cljs.core.first(xs)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(xs),cljs.core.last(xs)], null));\nvar function$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26601,(0),null);\nvar flc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26601,(1),null);\nvar vec__26604 = cljs.stacktrace.parse_file_line_column(flc);\nvar file = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26604,(0),null);\nvar line = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26604,(1),null);\nvar column = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26604,(2),null);\nif(cljs.core.truth_((function (){var and__4210__auto__ = file;\nif(cljs.core.truth_(and__4210__auto__)){\nvar and__4210__auto____$1 = function$;\nif(cljs.core.truth_(and__4210__auto____$1)){\nvar and__4210__auto____$2 = line;\nif(cljs.core.truth_(and__4210__auto____$2)){\nreturn column;\n} else {\nreturn and__4210__auto____$2;\n}\n} else {\nreturn and__4210__auto____$1;\n}\n} else {\nreturn and__4210__auto__;\n}\n})())){\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),cljs.stacktrace.parse_file(repl_env,file,opts),new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),clojure.string.replace(function$,/Object\\./,\"\"),new cljs.core.Keyword(null,\"line\",\"line\",212345235),line,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column], null);\n} else {\nif(clojure.string.blank_QMARK_(function$)){\nreturn null;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),null,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),clojure.string.replace(function$,/Object\\./,\"\"),new cljs.core.Keyword(null,\"line\",\"line\",212345235),null,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),null], null);\n}\n}\n});\ncljs.stacktrace.parse_stacktrace.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"chrome\",\"chrome\",1718738387),(function (repl_env,st,err,opts){\nreturn cljs.core.vec(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__26619_SHARP_){\nreturn cljs.stacktrace.chrome_st_el__GT_frame(repl_env,p1__26619_SHARP_,opts);\n}),cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__26618_SHARP_){\nreturn (!(cljs.stacktrace.starts_with_QMARK_(p1__26618_SHARP_,\"    at eval\")));\n}),cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2((function (p1__26617_SHARP_){\nreturn cljs.stacktrace.starts_with_QMARK_(p1__26617_SHARP_,\"Error\");\n}),clojure.string.split_lines(st))))));\n}));\ncljs.stacktrace.safari_st_el__GT_frame = (function cljs$stacktrace$safari_st_el__GT_frame(repl_env,st_el,opts){\nvar vec__26631 = (cljs.core.truth_(cljs.core.re_find(/@/,st_el))?clojure.string.split.cljs$core$IFn$_invoke$arity$2(st_el,/@/):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,st_el], null));\nvar function$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26631,(0),null);\nvar flc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26631,(1),null);\nvar vec__26634 = cljs.stacktrace.parse_file_line_column(flc);\nvar file = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26634,(0),null);\nvar line = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26634,(1),null);\nvar column = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26634,(2),null);\nif(cljs.core.truth_((function (){var and__4210__auto__ = file;\nif(cljs.core.truth_(and__4210__auto__)){\nvar and__4210__auto____$1 = function$;\nif(cljs.core.truth_(and__4210__auto____$1)){\nvar and__4210__auto____$2 = line;\nif(cljs.core.truth_(and__4210__auto____$2)){\nreturn column;\n} else {\nreturn and__4210__auto____$2;\n}\n} else {\nreturn and__4210__auto____$1;\n}\n} else {\nreturn and__4210__auto__;\n}\n})())){\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),cljs.stacktrace.parse_file(repl_env,file,opts),new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),clojure.string.trim(function$),new cljs.core.Keyword(null,\"line\",\"line\",212345235),line,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column], null);\n} else {\nif(clojure.string.blank_QMARK_(function$)){\nreturn null;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),null,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),clojure.string.trim(function$),new cljs.core.Keyword(null,\"line\",\"line\",212345235),null,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),null], null);\n}\n}\n});\ncljs.stacktrace.parse_stacktrace.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"safari\",\"safari\",497115653),(function (repl_env,st,err,opts){\nreturn cljs.core.vec(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__26650_SHARP_){\nreturn cljs.stacktrace.safari_st_el__GT_frame(repl_env,p1__26650_SHARP_,opts);\n}),cljs.core.remove.cljs$core$IFn$_invoke$arity$2(clojure.string.blank_QMARK_,cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__26649_SHARP_){\nreturn (!(cljs.stacktrace.starts_with_QMARK_(p1__26649_SHARP_,\"eval code\")));\n}),cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2((function (p1__26648_SHARP_){\nreturn cljs.stacktrace.starts_with_QMARK_(p1__26648_SHARP_,\"Error\");\n}),clojure.string.split_lines(st)))))));\n}));\ncljs.stacktrace.firefox_clean_function = (function cljs$stacktrace$firefox_clean_function(f){\nvar f__$1 = f;\nvar f__$2 = ((clojure.string.blank_QMARK_(f__$1))?null:((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(f__$1.indexOf(\"</\"),(-1)))?(function (){var idx = f__$1.indexOf(\"</\");\nreturn f__$1.substring((idx + (2)));\n})():f__$1\n));\nreturn clojure.string.replace(clojure.string.replace(f__$2,/</,\"\"),(new RegExp(\"\\\\/\")),\"\");\n});\ncljs.stacktrace.firefox_st_el__GT_frame = (function cljs$stacktrace$firefox_st_el__GT_frame(repl_env,st_el,opts){\nvar vec__26666 = (cljs.core.truth_(cljs.core.re_find(/@/,st_el))?clojure.string.split.cljs$core$IFn$_invoke$arity$2(st_el,/@/):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,st_el], null));\nvar function$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26666,(0),null);\nvar flc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26666,(1),null);\nvar vec__26669 = cljs.stacktrace.parse_file_line_column(flc);\nvar file = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26669,(0),null);\nvar line = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26669,(1),null);\nvar column = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26669,(2),null);\nif(cljs.core.truth_((function (){var and__4210__auto__ = file;\nif(cljs.core.truth_(and__4210__auto__)){\nvar and__4210__auto____$1 = function$;\nif(cljs.core.truth_(and__4210__auto____$1)){\nvar and__4210__auto____$2 = line;\nif(cljs.core.truth_(and__4210__auto____$2)){\nreturn column;\n} else {\nreturn and__4210__auto____$2;\n}\n} else {\nreturn and__4210__auto____$1;\n}\n} else {\nreturn and__4210__auto__;\n}\n})())){\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),cljs.stacktrace.parse_file(repl_env,file,opts),new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),cljs.stacktrace.firefox_clean_function(function$),new cljs.core.Keyword(null,\"line\",\"line\",212345235),line,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column], null);\n} else {\nif(clojure.string.blank_QMARK_(function$)){\nreturn null;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),null,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),cljs.stacktrace.firefox_clean_function(function$),new cljs.core.Keyword(null,\"line\",\"line\",212345235),null,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),null], null);\n}\n}\n});\ncljs.stacktrace.parse_stacktrace.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"firefox\",\"firefox\",1283768880),(function (repl_env,st,err,opts){\nreturn cljs.core.vec(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__26683_SHARP_){\nreturn cljs.stacktrace.firefox_st_el__GT_frame(repl_env,p1__26683_SHARP_,opts);\n}),cljs.core.remove.cljs$core$IFn$_invoke$arity$2(clojure.string.blank_QMARK_,cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__26682_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(p1__26682_SHARP_.indexOf(\"> eval\"),(-1));\n}),cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2((function (p1__26681_SHARP_){\nreturn cljs.stacktrace.starts_with_QMARK_(p1__26681_SHARP_,\"Error\");\n}),clojure.string.split_lines(st)))))));\n}));\ncljs.stacktrace.parse_stacktrace.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"nodejs\",\"nodejs\",321212524),(function (repl_env,st,err,p__26695){\nvar map__26696 = p__26695;\nvar map__26696__$1 = cljs.core.__destructure_map(map__26696);\nvar opts = map__26696__$1;\nvar output_dir = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26696__$1,new cljs.core.Keyword(null,\"output-dir\",\"output-dir\",-290956991));\nvar parse_source_loc_info = (function cljs$stacktrace$parse_source_loc_info(x){\nif(cljs.core.truth_((function (){var and__4210__auto__ = x;\nif(cljs.core.truth_(and__4210__auto__)){\nreturn (!(clojure.string.blank_QMARK_(x)));\n} else {\nreturn and__4210__auto__;\n}\n})())){\nreturn cljs.stacktrace.parse_int(x);\n} else {\nreturn null;\n}\n});\nvar process_frame = (function cljs$stacktrace$process_frame(frame_str){\nif(((clojure.string.blank_QMARK_(frame_str)) || ((cljs.core.re_find(/^\\s+at/,frame_str) == null)))){\nreturn null;\n} else {\nvar frame_str__$1 = clojure.string.replace(frame_str,/\\s+at\\s+/,\"\");\nif(clojure.string.starts_with_QMARK_(frame_str__$1,\"repl:\")){\nreturn null;\n} else {\nvar parts = clojure.string.split.cljs$core$IFn$_invoke$arity$2(frame_str__$1,/\\s+/);\nvar vec__26722 = ((((2) === cljs.core.count(parts)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(parts),cljs.core.subs.cljs$core$IFn$_invoke$arity$3(cljs.core.second(parts),(1),(cljs.core.count(cljs.core.second(parts)) - (1)))], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,cljs.core.first(parts)], null));\nvar function$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26722,(0),null);\nvar file_AMPERSAND_line = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26722,(1),null);\nvar vec__26725 = clojure.string.split.cljs$core$IFn$_invoke$arity$2(file_AMPERSAND_line,/:/);\nvar file_part = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26725,(0),null);\nvar line_part = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26725,(1),null);\nvar col_part = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26725,(2),null);\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),(cljs.core.truth_(function$)?(function (){var G__26732 = file_part;\nif(cljs.core.truth_(output_dir)){\nreturn clojure.string.replace(G__26732,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(output_dir),\"/\"].join(''),\"\");\n} else {\nreturn G__26732;\n}\n})():file_part),new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),function$,new cljs.core.Keyword(null,\"line\",\"line\",212345235),parse_source_loc_info(line_part),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),parse_source_loc_info(col_part)], null);\n}\n}\n});\nreturn cljs.core.vec(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(process_frame,clojure.string.split.cljs$core$IFn$_invoke$arity$2(st,/\\n/))));\n}));\ncljs.stacktrace.remove_ext = (function cljs$stacktrace$remove_ext(file){\nreturn clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(file,/\\.js$/,\"\"),/\\.cljs$/,\"\"),/\\.cljc$/,\"\"),/\\.clj$/,\"\");\n});\n/**\n * Given a cljs.source-map source map data structure map a generated line\n * and column back to the original line, column, and function called.\n */\ncljs.stacktrace.mapped_line_column_call = (function cljs$stacktrace$mapped_line_column_call(sms,file,line,column){\nvar source_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(sms,cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(clojure.string.replace(cljs.stacktrace.remove_ext(file),\"/\",\".\")));\nvar get_best_column = (function cljs$stacktrace$mapped_line_column_call_$_get_best_column(columns,column__$1){\nreturn cljs.core.last((function (){var or__4212__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(columns,cljs.core.last(cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__26739_SHARP_){\nreturn (p1__26739_SHARP_ <= (column__$1 - (1)));\n}),cljs.core.sort.cljs$core$IFn$_invoke$arity$1(cljs.core.keys(columns)))));\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn cljs.core.second(cljs.core.first(columns));\n}\n})());\n});\nvar adjust = (function cljs$stacktrace$mapped_line_column_call_$_adjust(mapped){\nreturn cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$3((function (p1__26740_SHARP_,p2__26741_SHARP_){\nreturn (p1__26740_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__26740_SHARP_.cljs$core$IFn$_invoke$arity$1(p2__26741_SHARP_) : p1__26740_SHARP_.call(null,p2__26741_SHARP_));\n}),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.inc,cljs.core.inc,cljs.core.identity], null),mapped));\n});\nvar default$ = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [line,column,null], null);\nvar temp__5751__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(source_map,(line - (1)));\nif(cljs.core.truth_(temp__5751__auto__)){\nvar columns = temp__5751__auto__;\nreturn adjust(cljs.core.map.cljs$core$IFn$_invoke$arity$2(get_best_column(columns,column),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"col\",\"col\",-1959363084),new cljs.core.Keyword(null,\"name\",\"name\",1843675177)], null)));\n} else {\nreturn default$;\n}\n});\n/**\n * Given opts and a canonicalized JavaScript stacktrace frame, return the\n *   ClojureScript frame.\n */\ncljs.stacktrace.mapped_frame = (function cljs$stacktrace$mapped_frame(p__26763,sms,opts){\nvar map__26765 = p__26763;\nvar map__26765__$1 = cljs.core.__destructure_map(map__26765);\nvar function$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26765__$1,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473));\nvar file = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26765__$1,new cljs.core.Keyword(null,\"file\",\"file\",-1269645878));\nvar line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26765__$1,new cljs.core.Keyword(null,\"line\",\"line\",212345235));\nvar column = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26765__$1,new cljs.core.Keyword(null,\"column\",\"column\",2078222095));\nvar no_source_file_QMARK_ = ((cljs.core.not(file))?true:cljs.stacktrace.starts_with_QMARK_(file,\"<\"));\nvar vec__26768 = ((no_source_file_QMARK_)?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [line,column,null], null):cljs.stacktrace.mapped_line_column_call(sms,file,line,column));\nvar line_SINGLEQUOTE_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26768,(0),null);\nvar column_SINGLEQUOTE_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26768,(1),null);\nvar call = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26768,(2),null);\nvar file_SINGLEQUOTE_ = ((no_source_file_QMARK_)?null:((cljs.stacktrace.ends_with_QMARK_(file,\".js\"))?[cljs.core.subs.cljs$core$IFn$_invoke$arity$3(file,(0),(cljs.core.count(file) - (3))),\".cljs\"].join(''):file));\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),function$,new cljs.core.Keyword(null,\"call\",\"call\",-519999866),call,new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),((no_source_file_QMARK_)?[\"NO_SOURCE_FILE\",(cljs.core.truth_(file)?[\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(file)].join(''):null)].join(''):file_SINGLEQUOTE_),new cljs.core.Keyword(null,\"line\",\"line\",212345235),line_SINGLEQUOTE_,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column_SINGLEQUOTE_], null);\n});\n/**\n * Given a vector representing the canonicalized JavaScript stacktrace\n * return the ClojureScript stacktrace. The canonical stacktrace must be\n * in the form:\n * \n *  [{:file <string>\n *    :function <string>\n *    :line <integer>\n *    :column <integer>}*]\n * \n * :file must be a URL path (without protocol) relative to :output-dir or a\n * identifier delimited by angle brackets. The returned mapped stacktrace will\n * also contain :url entries to the original sources if it can be determined\n * from the classpath.\n */\ncljs.stacktrace.mapped_stacktrace = (function cljs$stacktrace$mapped_stacktrace(var_args){\nvar G__26791 = arguments.length;\nswitch (G__26791) {\ncase 2:\nreturn cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$2 = (function (stacktrace,sms){\nreturn cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3(stacktrace,sms,null);\n}));\n\n(cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3 = (function (stacktrace,sms,opts){\nvar call__GT_function = (function cljs$stacktrace$call__GT_function(x){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"call\",\"call\",-519999866).cljs$core$IFn$_invoke$arity$1(x))){\nreturn cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"function\",\"function\",-2127255473)],[new cljs.core.Keyword(null,\"call\",\"call\",-519999866).cljs$core$IFn$_invoke$arity$1(x)]);\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n});\nvar call_merge = (function cljs$stacktrace$call_merge(function$,call){\nreturn cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic((function (munged_fn_name,unmunged_call_name){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(munged_fn_name,clojure.string.replace(cljs.core.munge(unmunged_call_name),\".\",\"$\"))){\nreturn unmunged_call_name;\n} else {\nreturn munged_fn_name;\n}\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([function$,call], 0));\n});\nvar mapped_frames = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.memoize((function (p1__26785_SHARP_){\nreturn cljs.stacktrace.mapped_frame(p1__26785_SHARP_,sms,opts);\n})),stacktrace);\nreturn cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$3(call_merge,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__26786_SHARP_){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(p1__26786_SHARP_,new cljs.core.Keyword(null,\"call\",\"call\",-519999866));\n}),mapped_frames),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(cljs.core.map.cljs$core$IFn$_invoke$arity$2(call__GT_function,mapped_frames)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.EMPTY], null))));\n}));\n\n(cljs.stacktrace.mapped_stacktrace.cljs$lang$maxFixedArity = 3);\n\n/**\n * Given a vector representing the canonicalized JavaScript stacktrace and a map\n *   of library names to decoded source maps, print the ClojureScript stacktrace .\n *   See mapped-stacktrace.\n */\ncljs.stacktrace.mapped_stacktrace_str = (function cljs$stacktrace$mapped_stacktrace_str(var_args){\nvar G__26823 = arguments.length;\nswitch (G__26823) {\ncase 2:\nreturn cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$2 = (function (stacktrace,sms){\nreturn cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$3(stacktrace,sms,null);\n}));\n\n(cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$3 = (function (stacktrace,sms,opts){\nvar sb__4749__auto__ = (new goog.string.StringBuffer());\nvar _STAR_print_newline_STAR__orig_val__26828_26994 = cljs.core._STAR_print_newline_STAR_;\nvar _STAR_print_fn_STAR__orig_val__26829_26995 = cljs.core._STAR_print_fn_STAR_;\nvar _STAR_print_newline_STAR__temp_val__26830_26996 = true;\nvar _STAR_print_fn_STAR__temp_val__26831_26997 = (function (x__4750__auto__){\nreturn sb__4749__auto__.append(x__4750__auto__);\n});\n(cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__temp_val__26830_26996);\n\n(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__temp_val__26831_26997);\n\ntry{var seq__26837_27002 = cljs.core.seq(cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3(stacktrace,sms,opts));\nvar chunk__26838_27003 = null;\nvar count__26839_27004 = (0);\nvar i__26840_27005 = (0);\nwhile(true){\nif((i__26840_27005 < count__26839_27004)){\nvar map__26860_27009 = chunk__26838_27003.cljs$core$IIndexed$_nth$arity$2(null,i__26840_27005);\nvar map__26860_27010__$1 = cljs.core.__destructure_map(map__26860_27009);\nvar function_27011 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26860_27010__$1,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473));\nvar file_27012 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26860_27010__$1,new cljs.core.Keyword(null,\"file\",\"file\",-1269645878));\nvar line_27013 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26860_27010__$1,new cljs.core.Keyword(null,\"line\",\"line\",212345235));\nvar column_27014 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26860_27010__$1,new cljs.core.Keyword(null,\"column\",\"column\",2078222095));\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"\\t\",[(cljs.core.truth_(function_27011)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(function_27011),\" \"].join(''):null),\"(\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(file_27012),(cljs.core.truth_(line_27013)?[\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(line_27013)].join(''):null),(cljs.core.truth_(column_27014)?[\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(column_27014)].join(''):null),\")\"].join('')], 0));\n\n\nvar G__27019 = seq__26837_27002;\nvar G__27020 = chunk__26838_27003;\nvar G__27021 = count__26839_27004;\nvar G__27022 = (i__26840_27005 + (1));\nseq__26837_27002 = G__27019;\nchunk__26838_27003 = G__27020;\ncount__26839_27004 = G__27021;\ni__26840_27005 = G__27022;\ncontinue;\n} else {\nvar temp__5753__auto___27023 = cljs.core.seq(seq__26837_27002);\nif(temp__5753__auto___27023){\nvar seq__26837_27026__$1 = temp__5753__auto___27023;\nif(cljs.core.chunked_seq_QMARK_(seq__26837_27026__$1)){\nvar c__4638__auto___27028 = cljs.core.chunk_first(seq__26837_27026__$1);\nvar G__27029 = cljs.core.chunk_rest(seq__26837_27026__$1);\nvar G__27030 = c__4638__auto___27028;\nvar G__27031 = cljs.core.count(c__4638__auto___27028);\nvar G__27032 = (0);\nseq__26837_27002 = G__27029;\nchunk__26838_27003 = G__27030;\ncount__26839_27004 = G__27031;\ni__26840_27005 = G__27032;\ncontinue;\n} else {\nvar map__26868_27034 = cljs.core.first(seq__26837_27026__$1);\nvar map__26868_27035__$1 = cljs.core.__destructure_map(map__26868_27034);\nvar function_27036 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26868_27035__$1,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473));\nvar file_27037 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26868_27035__$1,new cljs.core.Keyword(null,\"file\",\"file\",-1269645878));\nvar line_27038 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26868_27035__$1,new cljs.core.Keyword(null,\"line\",\"line\",212345235));\nvar column_27039 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26868_27035__$1,new cljs.core.Keyword(null,\"column\",\"column\",2078222095));\ncljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"\\t\",[(cljs.core.truth_(function_27036)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(function_27036),\" \"].join(''):null),\"(\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(file_27037),(cljs.core.truth_(line_27038)?[\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(line_27038)].join(''):null),(cljs.core.truth_(column_27039)?[\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(column_27039)].join(''):null),\")\"].join('')], 0));\n\n\nvar G__27041 = cljs.core.next(seq__26837_27026__$1);\nvar G__27042 = null;\nvar G__27043 = (0);\nvar G__27044 = (0);\nseq__26837_27002 = G__27041;\nchunk__26838_27003 = G__27042;\ncount__26839_27004 = G__27043;\ni__26840_27005 = G__27044;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n}finally {(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__orig_val__26829_26995);\n\n(cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__orig_val__26828_26994);\n}\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4749__auto__);\n}));\n\n(cljs.stacktrace.mapped_stacktrace_str.cljs$lang$maxFixedArity = 3);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","cljs/stacktrace.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$cljs.stacktrace","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$goog.string","^O","~$gstring","^O","~$clojure.string","^Q","~$string","^Q","~$cljs.core","^S","~$goog","^T"],"~:seen",["^H",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^S","^S"],"~:form",["~#list",["~$ns","^J",["^Z",["^V",["^O","~:as","^P"],["^Q","^10","^R"]]]]],"~:flags",["^ ","^V",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^T","^S","^O","^Q"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","cljs/stacktrace.cljc"],"~:compiled-at",1631463496653,"~:resource-name","cljs/stacktrace.cljc","~:warnings",[],"~:source",";; Copyright (c) Rich Hickey. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file epl-v10.html at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns cljs.stacktrace\n  (:require #?@(:clj  [[cljs.util :as util]\n                       [clojure.java.io :as io]]\n                :cljs [[goog.string :as gstring]])\n            [clojure.string :as string])\n  #?(:clj (:import [java.util.regex Pattern]\n                   [java.io File])))\n\n(defmulti parse-stacktrace\n  \"Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str\"\n  (fn [repl-env st err opts] (:ua-product err)))\n\n(defn parse-int [s]\n  #?(:clj  (Long/parseLong s)\n     :cljs (js/parseInt s 10)))\n\n(defn starts-with?\n  #?(:cljs {:tag boolean})\n  [^String s0 s1]\n  #?(:clj  (.startsWith s0 s1)\n     :cljs (gstring/startsWith s0 s1)))\n\n(defn ends-with?\n  #?(:cljs {:tag boolean})\n  [^String s0 s1]\n  #?(:clj  (.endsWith s0 s1)\n     :cljs (gstring/endsWith s0 s1)))\n\n(defn string->regex [s]\n  #?(:clj  (Pattern/compile s)\n     :cljs (js/RegExp. s)))\n\n(defn output-directory [opts]\n  #?(:clj  (util/output-directory opts)\n     :cljs (or (:output-dir opts) \"out\")))\n\n(defmethod parse-stacktrace :default\n  [repl-env st err opts] st)\n\n(defn parse-file-line-column [flc]\n  (if-not (re-find #\":\" flc)\n    [flc nil nil]\n    (let [xs (string/split flc #\":\")\n          [pre [line column]]\n          (reduce\n            (fn [[pre post] [x i]]\n              (if (<= i 2)\n                [pre (conj post x)]\n                [(conj pre x) post]))\n            [[] []] (map vector xs (range (count xs) 0 -1)))\n          file (string/join \":\" pre)]\n      [(cond-> file\n         (starts-with? file \"(\") (string/replace \"(\" \"\"))\n       (parse-int\n         (cond-> line\n           (ends-with? line \")\") (string/replace \")\" \"\")))\n       (parse-int\n         (cond-> column\n           (ends-with? column \")\") (string/replace \")\" \"\")))])))\n\n(defn parse-file\n  \"Given a browser file url convert it into a relative path that can be used\n   to locate the original source.\"\n  [{:keys [host host-port port] :as repl-env} file {:keys [asset-path] :as opts}]\n  (let [urlpat (if host\n                 (string->regex\n                   (str \"http://\" host \":\" (or host-port port) \"/\"))\n                 \"\")\n        match  (if host\n                 (re-find urlpat file)\n                 (contains? opts :output-dir))]\n    (if match\n      (-> file\n        (string/replace urlpat \"\")\n        (string/replace\n          (string->regex\n            ;; if :asset-path specified drop leading slash\n            (str \"^\" (or (and asset-path (string/replace asset-path #\"^/\" \"\"))\n                         (output-directory opts)) \"/\"))\n          \"\"))\n      (if-let [asset-root (:asset-root opts)]\n        (string/replace file asset-root \"\")\n        (throw\n          (ex-info (str \"Could not relativize URL \" file)\n            {:type :parse-stacktrace\n             :reason :relativize-url}))))))\n\n;; -----------------------------------------------------------------------------\n;; Chrome Stacktrace\n\n(defn chrome-st-el->frame\n  [repl-env st-el opts]\n  (let [xs (-> st-el\n             (string/replace #\"\\s+at\\s+\" \"\")\n             (string/split #\"\\s+\"))\n        [function flc] (if (== 1 (count xs))\n                         [nil (first xs)]\n                         [(first xs) (last xs)])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (string/replace function #\"Object\\.\" \"\")\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (string/replace function #\"Object\\.\" \"\")\n         :line nil\n         :column nil}))))\n\n(comment\n  (chrome-st-el->frame {:host \"localhost\" :port 9000}\n    \"\\tat cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5356:34)\" {})\n  )\n\n(defmethod parse-stacktrace :chrome\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(not (starts-with? % \"    at eval\")))\n    (map #(chrome-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4258:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/out/cljs/core.js:4288:19)\n    at cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5356:34)\n    at http://localhost:9000/out/cljs/core.js:16971:89\n    at cljs.core.map.cljs$core$map__2 (http://localhost:9000/out/cljs/core.js:16972:3)\n    at http://localhost:9000/out/cljs/core.js:10981:129\n    at cljs.core.LazySeq.sval (http://localhost:9000/out/cljs/core.js:10982:3)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (http://localhost:9000/out/cljs/core.js:11073:10)\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4239:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (http://localhost:9000/out/cljs/core.js:28706:14)\"\n    {:ua-product :chrome}\n    nil)\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/js/cljs/core.js:4258:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/js/cljs/core.js:4288:19)\n    at cljs$core$ffirst (http://localhost:9000/js/cljs/core.js:5356:34)\n    at http://localhost:9000/js/cljs/core.js:16971:89\n    at cljs.core.map.cljs$core$map__2 (http://localhost:9000/js/cljs/core.js:16972:3)\n    at http://localhost:9000/js/cljs/core.js:10981:129\n    at cljs.core.LazySeq.sval (http://localhost:9000/js/cljs/core.js:10982:3)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (http://localhost:9000/js/cljs/core.js:11073:10)\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/js/cljs/core.js:4239:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (http://localhost:9000/js/cljs/core.js:28706:14)\"\n    {:ua-product :chrome}\n    {:asset-path \"/js\"})\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4259:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/out/cljs/core.js:4289:19)\n    at cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5357:18)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:1:106)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:9:3)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:14:4)\n    at http://localhost:9000/out/clojure/browser/repl.js:23:267\n    at clojure$browser$repl$evaluate_javascript (http://localhost:9000/out/clojure/browser/repl.js:26:4)\n    at Object.callback (http://localhost:9000/out/clojure/browser/repl.js:121:169)\n    at goog.messaging.AbstractChannel.deliver (http://localhost:9000/out/goog/messaging/abstractchannel.js:142:13)\"\n    {:ua-product :chrome}\n    nil)\n\n  ;; Node.js example\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:3999:8)\n    at Object.cljs$core$first [as first] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:4018:19)\n    at cljs$core$ffirst (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:5161:34)\n    at /home/my/cool/project/.cljs_bootstrap/cljs/core.js:16006:88\n    at cljs.core.map.cljs$core$IFn$_invoke$arity$2 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:16007:3)\n    at cljs.core.LazySeq.sval (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:10244:109)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:10335:10)\n    at Object.cljs$core$seq [as seq] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:3980:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:28084:14)\n    at cljs.core.LazySeq.cljs$core$IPrintWithWriter$_pr_writer$arity$3 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:28812:18)\"\n    {:ua-product :chrome}\n    {:output-dir \"/home/my/cool/project/.cljs_bootstrap\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Safari Stacktrace\n\n(defn safari-st-el->frame\n  [repl-env st-el opts]\n  (let [[function flc] (if (re-find #\"@\" st-el)\n                         (string/split st-el #\"@\")\n                         [nil st-el])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (string/trim function)\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (string/trim function)\n         :line nil\n         :column nil}))))\n\n(comment\n  (safari-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4259:17\" {})\n\n  (safari-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/js/cljs/core.js:4259:17\" {:asset-path \"js\"})\n  )\n\n(defmethod parse-stacktrace :safari\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(not (starts-with? % \"eval code\")))\n    (remove string/blank?)\n    (map #(safari-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {}\n    \"cljs$core$seq@out/cljs/core.js:3999:17\n    cljs$core$first@out/cljs/core.js:4018:22\n    cljs$core$ffirst@out/cljs/core.js:5161:39\n    global code\"\n    {:ua-product :safari}\n    {:output-dir \"out\"})\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4259:17\ncljs$core$first@http://localhost:9000/out/cljs/core.js:4289:22\ncljs$core$ffirst@http://localhost:9000/out/cljs/core.js:5357:39\nhttp://localhost:9000/out/cljs/core.js:16972:92\nhttp://localhost:9000/out/cljs/core.js:16973:3\nhttp://localhost:9000/out/cljs/core.js:10982:133\nsval@http://localhost:9000/out/cljs/core.js:10983:3\ncljs$core$ISeqable$_seq$arity$1@http://localhost:9000/out/cljs/core.js:11074:14\ncljs$core$seq@http://localhost:9000/out/cljs/core.js:4240:44\ncljs$core$pr_sequential_writer@http://localhost:9000/out/cljs/core.js:28707:17\ncljs$core$IPrintWithWriter$_pr_writer$arity$3@http://localhost:9000/out/cljs/core.js:29386:38\ncljs$core$pr_writer_impl@http://localhost:9000/out/cljs/core.js:28912:57\ncljs$core$pr_writer@http://localhost:9000/out/cljs/core.js:29011:32\ncljs$core$pr_seq_writer@http://localhost:9000/out/cljs/core.js:29015:20\ncljs$core$pr_sb_with_opts@http://localhost:9000/out/cljs/core.js:29078:24\ncljs$core$pr_str_with_opts@http://localhost:9000/out/cljs/core.js:29092:48\ncljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29130:34\ncljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29139:39\neval code\neval@[native code]\nhttp://localhost:9000/out/clojure/browser/repl.js:23:271\nclojure$browser$repl$evaluate_javascript@http://localhost:9000/out/clojure/browser/repl.js:26:4\nhttp://localhost:9000/out/clojure/browser/repl.js:121:173\ndeliver@http://localhost:9000/out/goog/messaging/abstractchannel.js:142:21\nxpcDeliver@http://localhost:9000/out/goog/net/xpc/crosspagechannel.js:733:19\nmessageReceived_@http://localhost:9000/out/goog/net/xpc/nativemessagingtransport.js:321:23\nfireListener@http://localhost:9000/out/goog/events/events.js:741:25\nhandleBrowserEvent_@http://localhost:9000/out/goog/events/events.js:862:34\nhttp://localhost:9000/out/goog/events/events.js:276:42\"\n    {:ua-product :safari}\n    nil)\n  )\n\n;; -----------------------------------------------------------------------------\n;; Firefox Stacktrace\n\n(defn firefox-clean-function [f]\n  (as-> f f\n    (cond\n      (string/blank? f) nil\n      (not= (.indexOf f \"</\") -1)\n      (let [idx (.indexOf f \"</\")]\n        (.substring f (+ idx 2)))\n      :else f)\n    (-> f\n      (string/replace #\"<\" \"\")\n      (string/replace #?(:clj #\"\\/\" :cljs (js/RegExp. \"\\\\/\")) \"\"))))\n\n(defn firefox-st-el->frame\n  [repl-env st-el opts]\n  (let [[function flc] (if (re-find #\"@\" st-el)\n                         (string/split st-el #\"@\")\n                         [nil st-el])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (firefox-clean-function function)\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (firefox-clean-function function)\n         :line nil\n         :column nil}))))\n\n(comment\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4258:8\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.pr_str</cljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29138:8\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.pr_str</cljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29129:8\" {})\n  )\n\n(defmethod parse-stacktrace :firefox\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(= (.indexOf % \"> eval\") -1))\n    (remove string/blank?)\n    (map #(firefox-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4258:8\ncljs$core$first@http://localhost:9000/out/cljs/core.js:4288:9\ncljs$core$ffirst@http://localhost:9000/out/cljs/core.js:5356:24\ncljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\ncljs.core.map</cljs$core$map__2/<@http://localhost:9000/out/cljs/core.js:16970:1\ncljs.core.LazySeq.prototype.sval/self__.s<@http://localhost:9000/out/cljs/core.js:10981:119\ncljs.core.LazySeq.prototype.sval@http://localhost:9000/out/cljs/core.js:10981:13\ncljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1@http://localhost:9000/out/cljs/core.js:11073:1\ncljs$core$seq@http://localhost:9000/out/cljs/core.js:4239:8\ncljs$core$pr_sequential_writer@http://localhost:9000/out/cljs/core.js:28706:4\ncljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3@http://localhost:9000/out/cljs/core.js:29385:8\ncljs$core$pr_writer_impl@http://localhost:9000/out/cljs/core.js:28911:8\ncljs$core$pr_writer@http://localhost:9000/out/cljs/core.js:29010:8\ncljs$core$pr_seq_writer@http://localhost:9000/out/cljs/core.js:29014:1\ncljs$core$pr_sb_with_opts@http://localhost:9000/out/cljs/core.js:29077:1\ncljs$core$pr_str_with_opts@http://localhost:9000/out/cljs/core.js:29091:23\ncljs.core.pr_str</cljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29129:8\ncljs.core.pr_str</cljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29138:8\n@http://localhost:9000/out/clojure/browser/repl.js line 23 > eval:1:25\n@http://localhost:9000/out/clojure/browser/repl.js line 23 > eval:1:2\nclojure$browser$repl$evaluate_javascript/result<@http://localhost:9000/out/clojure/browser/repl.js:23:267\nclojure$browser$repl$evaluate_javascript@http://localhost:9000/out/clojure/browser/repl.js:23:15\nclojure$browser$repl$connect/</<@http://localhost:9000/out/clojure/browser/repl.js:121:128\ngoog.messaging.AbstractChannel.prototype.deliver@http://localhost:9000/out/goog/messaging/abstractchannel.js:142:5\ngoog.net.xpc.CrossPageChannel.prototype.xpcDeliver@http://localhost:9000/out/goog/net/xpc/crosspagechannel.js:733:7\ngoog.net.xpc.NativeMessagingTransport.messageReceived_@http://localhost:9000/out/goog/net/xpc/nativemessagingtransport.js:321:1\ngoog.events.fireListener@http://localhost:9000/out/goog/events/events.js:741:10\ngoog.events.handleBrowserEvent_@http://localhost:9000/out/goog/events/events.js:862:1\ngoog.events.getProxy/f<@http://localhost:9000/out/goog/events/events.js:276:16\"\n    {:ua-product :firefox}\n    nil)\n  )\n\n;; -----------------------------------------------------------------------------\n;; Node.js Stacktrace\n\n(defmethod parse-stacktrace :nodejs\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(parse-source-loc-info [x]\n            (when (and x (not (string/blank? x)))\n              (parse-int x)))\n          (process-frame [frame-str]\n            (when-not (or (string/blank? frame-str)\n                          (nil? (re-find #\"^\\s+at\" frame-str)))\n              (let [frame-str (string/replace frame-str #\"\\s+at\\s+\" \"\")]\n                (when-not (string/starts-with? frame-str \"repl:\")\n                  (let [parts (string/split frame-str #\"\\s+\")\n                        [function file&line] (if (== 2 (count parts))\n                                                   [(first parts)\n                                                    (subs (second parts) 1\n                                                      (dec (count (second parts))))]\n                                                   [nil (first parts)])\n                        [file-part line-part col-part] (string/split file&line #\":\")]\n                    {:file     (if function\n                                 (cond-> file-part\n                                   output-dir\n                                   (string/replace\n                                     (str output-dir\n                                       #?(:clj File/separator :cljs \"/\"))\n                                     \"\"))\n                                 file-part)\n                     :function function\n                     :line     (parse-source-loc-info line-part)\n                     :column   (parse-source-loc-info col-part)})))))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n(comment\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    at cljs$core$seq (.cljs_node_repl/cljs/core.cljs:1118:20)\n    at repl:1:65\n    at repl:9:4\n    at repl:17:3\n    at repl:22:4\n    at Object.exports.runInThisContext (vm.js:54:17)\n    at Domain.<anonymous> ([stdin]:41:34)\n    at Domain.run (domain.js:228:14)\n    at Socket.<anonymous> ([stdin]:40:25)\n    at emitOne (events.js:77:13)\"\n\n    {:ua-product :nodejs}\n    {:output-dir \".cljs_node_repl\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Stacktrace Mapping\n\n(defn remove-ext [file]\n  (-> file\n    (string/replace #\"\\.js$\" \"\")\n    (string/replace #\"\\.cljs$\" \"\")\n    (string/replace #\"\\.cljc$\" \"\")\n    (string/replace #\"\\.clj$\" \"\")))\n\n(defn mapped-line-column-call\n  \"Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called.\"\n  [sms file line column]\n  (let [source-map (get sms (symbol (string/replace (remove-ext file) \"/\" \".\")))]\n    ;; source maps are 0 indexed for columns\n    ;; multiple segments may exist at column\n    ;; the last segment seems most accurate\n    (letfn [(get-best-column [columns column]\n             (last (or (get columns\n                         (last (filter #(<= % (dec column))\n                                 (sort (keys columns)))))\n                     (second (first columns)))))\n           (adjust [mapped]\n             (vec (map #(%1 %2) [inc inc identity] mapped)))]\n     (let [default [line column nil]]\n       ;; source maps are 0 indexed for lines\n       (if-let [columns (get source-map (dec line))]\n         (adjust (map (get-best-column columns column) [:line :col :name]))\n         default)))))\n\n(defn mapped-frame\n  \"Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame.\"\n  [{:keys [function file line column]} sms opts]\n  (let [no-source-file?      (if-not file true (starts-with? file \"<\"))\n        [line' column' call] (if no-source-file?\n                               [line column nil]\n                               (mapped-line-column-call sms file line column))\n        file'                (when-not no-source-file?\n                               (if (ends-with? file \".js\")\n                                 (str (subs file 0 (- (count file) 3)) \".cljs\")\n                                 file))]\n    {:function function\n     :call     call\n     :file     (if no-source-file?\n                 (str \"NO_SOURCE_FILE\" (when file (str \" \" file)))\n                 file')\n     :line     line'\n     :column   column'}))\n\n(defn mapped-stacktrace\n  \"Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath.\"\n  ([stacktrace sms]\n   (mapped-stacktrace stacktrace sms nil))\n  ([stacktrace sms opts]\n   (letfn [(call->function [x]\n             (if (:call x)\n               (hash-map :function (:call x))\n               {}))\n           (call-merge [function call]\n             (merge-with\n               (fn [munged-fn-name unmunged-call-name]\n                 (if (= munged-fn-name\n                        (string/replace (munge unmunged-call-name) \".\" \"$\"))\n                   unmunged-call-name\n                   munged-fn-name))\n               function call))]\n     (let [mapped-frames (map (memoize #(mapped-frame % sms opts)) stacktrace)]\n       ;; take each non-nil :call and optionally merge it into :function one-level\n       ;; up to avoid replacing with local symbols, we only replace munged name if\n       ;; we can munge call symbol back to it\n       (vec (map call-merge\n              (map #(dissoc % :call) mapped-frames)\n              (concat (rest (map call->function mapped-frames)) [{}])))))))\n\n(defn mapped-stacktrace-str\n  \"Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace.\"\n  ([stacktrace sms]\n   (mapped-stacktrace-str stacktrace sms nil))\n  ([stacktrace sms opts]\n   (with-out-str\n     (doseq [{:keys [function file line column]}\n             (mapped-stacktrace stacktrace sms opts)]\n       (println \"\\t\"\n         (str (when function (str function \" \"))\n              \"(\" file (when line (str \":\" line))\n                       (when column (str \":\" column)) \")\"))))))\n\n(comment\n  (require '[cljs.closure :as cljsc]\n           '[clojure.data.json :as json]\n           '[cljs.source-map :as sm]\n           '[clojure.pprint :as pp])\n\n  (cljsc/build \"samples/hello/src\"\n    {:optimizations :none\n     :output-dir \"samples/hello/out\"\n     :output-to \"samples/hello/out/hello.js\"\n     :source-map true})\n\n  (def sms\n    {'hello.core\n     (sm/decode\n       (json/read-str\n         (slurp \"samples/hello/out/hello/core.js.map\")\n         :key-fn keyword))})\n\n  (pp/pprint sms)\n\n  ;; maps to :line 5 :column 24\n  (mapped-stacktrace\n    [{:file \"hello/core.js\"\n      :function \"first\"\n      :line 6\n      :column 0}]\n    sms {:output-dir \"samples/hello/out\"})\n\n  (mapped-stacktrace-str\n    [{:file \"hello/core.js\"\n      :function \"first\"\n      :line 6\n      :column 0}]\n    sms {:output-dir \"samples/hello/out\"})\n  )\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["js/cljs","js/cljs.stacktrace","js/cljs.stacktrace.parse-stacktrace","method-table__4701__auto__","cljs.core.atom","prefer-table__4702__auto__","method-cache__4703__auto__","cached-hierarchy__4704__auto__","hierarchy__4705__auto__","cljs.core.get","fexpr__26518","cljs.core/MultiFn","cljs.core.symbol","cljs.stacktrace/parse-stacktrace","repl-env","st","err","opts","cljs.stacktrace/parse-int","s","js/parseInt","cljs.stacktrace/starts-with?","s0","s1","goog.string/startsWith","cljs.stacktrace/ends-with?","goog.string/endsWith","cljs.stacktrace/string->regex","js/RegExp","cljs.stacktrace/output-directory","or__4212__auto__","cljs.stacktrace/parse-file-line-column","flc","cljs.core/not","cljs.core/re-find","vec__26547","cljs.core.nth","vec__26550","xs","clojure.string.split","pre","line","column","cljs.core.reduce","p__26554","p__26555","vec__26559","vec__26562","post","x","i","cljs.core.conj","cljs.core.map","cljs.core/vector","cljs.core.range","cljs.core/count","file","clojure.string.join","G__26570","clojure.string/replace","G__26573","G__26576","p__26581","p__26582","map__26583","cljs.core/--destructure-map","map__26584","cljs.stacktrace/parse-file","host","host-port","port","asset-path","urlpat","match","cljs.core/contains?","and__4210__auto__","temp__5751__auto__","asset-root","cljs.core.ex_info","cljs.stacktrace/chrome-st-el->frame","st-el","vec__26601","vec__26604","function","cljs.core/first","cljs.core/last","clojure.string/blank?","clojure.string/split-lines","p1__26617#","cljs.core.drop_while","p1__26618#","cljs.core.take_while","p1__26619#","cljs.core.remove","cljs.core/nil?","cljs.core/vec","cljs.stacktrace/safari-st-el->frame","vec__26631","vec__26634","clojure.string/trim","p1__26648#","p1__26649#","p1__26650#","cljs.stacktrace/firefox-clean-function","f","cljs.core.not_EQ_","idx","cljs.stacktrace/firefox-st-el->frame","vec__26666","vec__26669","p1__26681#","p1__26682#","cljs.core._EQ_","p1__26683#","p__26695","map__26696","output-dir","frame-str","clojure.string/starts-with?","vec__26722","vec__26725","parts","file&line","cljs.core.subs","cljs.core/second","file-part","line-part","col-part","G__26732","parse-source-loc-info","process-frame","cljs.stacktrace/remove-ext","cljs.stacktrace/mapped-line-column-call","sms","source-map","columns","p1__26739#","cljs.core.filter","cljs.core.sort","cljs.core/keys","mapped","p1__26740#","p2__26741#","cljs.core/inc","cljs.core/identity","default","adjust","get-best-column","p__26763","map__26765","cljs.stacktrace/mapped-frame","vec__26768","no-source-file?","line'","column'","call","file'","var_args","G__26791","cljs.stacktrace/mapped-stacktrace","js/Error","stacktrace","cljs.stacktrace.mapped_stacktrace","cljs.core/PersistentHashMap","cljs.core.merge_with","munged-fn-name","unmunged-call-name","cljs.core/munge","mapped-frames","p1__26785#","cljs.core/memoize","call-merge","p1__26786#","cljs.core.dissoc","cljs.core.concat","cljs.core/rest","call->function","G__26823","cljs.stacktrace/mapped-stacktrace-str","cljs.stacktrace.mapped_stacktrace_str","sb__4749__auto__","goog.string/StringBuffer","*print-newline*-orig-val__26828","cljs.core/*print-newline*","*print-fn*-orig-val__26829","cljs.core/*print-fn*","*print-newline*-temp-val__26830","*print-fn*-temp-val__26831","x__4750__auto__","seq__26837","cljs.core/seq","chunk__26838","count__26839","i__26840","map__26860","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","map__26868","cljs.core/next","cljs.core.println"]],"~:used-vars",["^H",["~$cljs.stacktrace/starts-with?","~$cljs.core/--destructure-map","~$clojure.string/join","~$cljs.stacktrace/safari-st-el->frame","~$cljs.core/rest","~$cljs.core/PersistentHashMap","~$cljs.core/MultiFn","~$cljs.stacktrace/mapped-frame","~$clojure.string/starts-with?","~$cljs.stacktrace/firefox-st-el->frame","~$js/RegExp","~$cljs.stacktrace/parse-int","~$cljs.stacktrace/parse-stacktrace","~$clojure.string/split","~$clojure.string/blank?","~$cljs.core/filter","~$cljs.core/=","~$cljs.core/keys","~$cljs.core/take-while","~$js/cljs.stacktrace","~$cljs.core/drop-while","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.stacktrace/firefox-clean-function","~$cljs.core/identity","~$cljs.core/last","~$cljs.core/not=","~$cljs.core/dissoc","~$cljs.core/*print-newline*","~$cljs.stacktrace/ends-with?","~$cljs.core/chunk-rest","~$cljs.core/atom","~$clojure.string/split-lines","~$cljs.core/concat","~$cljs.core/memoize","~$cljs.core/merge-with","~$cljs.core/contains?","~$cljs.core/conj","~$cljs.core/sort","~$cljs.stacktrace/mapped-stacktrace-str","~$js/cljs","~$cljs.core/map","~$js/cljs.stacktrace.parse-stacktrace","~$cljs.stacktrace/mapped-line-column-call","~$cljs.core/-add-method","~$js/parseInt","~$cljs.core/get","~$cljs.core/-nth","~$cljs.core/remove","~$cljs.stacktrace/chrome-st-el->frame","~$cljs.stacktrace/mapped-stacktrace","~$goog.string/StringBuffer","~$cljs.core/symbol","~$cljs.core/re-find","~$cljs.stacktrace/parse-file","~$cljs.core/nil?","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/second","~$cljs.core/println","~$clojure.string/replace","~$cljs.stacktrace/parse-file-line-column","~$cljs.stacktrace/string->regex","~$cljs.core/next","~$cljs.core/vec","~$goog.string/startsWith","~$cljs.core/*print-fn*","~$cljs.core/not","~$cljs.stacktrace/output-directory","~$cljs.core/range","~$clojure.string/trim","~$cljs.core/munge","~$cljs.core/first","~$cljs.core/subs","~$js/Error","~$cljs.core/vector","~$cljs.stacktrace/remove-ext","~$cljs.core/inc","~$goog.string/endsWith","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["^15","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^T","~$goog.dom.HtmlElement"]]],["^15","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","~$goog.array","~$goog.asserts"]]],["^15","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T"]]],["^15","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3B","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^15","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3C","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3F"]]],["^15","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3C"]]],["^15","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T"]]],["^15","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T"]]],["^15","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T"]]],["^15","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T"]]],["^15","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3C"]]],"~:SHADOW-TIMESTAMP",[1631463311000,1631463311000,1631463305000],["^15","cljs/stacktrace.cljc"],["528fbd795675bc73c189ce8a8429415f03165a3b","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^S","^O","^Q"]]],["^15","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3C","~$goog.reflect"]]],["^15","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3C","~$goog.fs.blob","^3G","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3I","^3J","^3K","^3L"]]],["^15","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T"]]],["^15","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T"]]],["^15","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3B","^3C","~$goog.html.SafeUrl","^3K","^3L","^3F"]]],["^15","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3C","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3P","~$goog.html.SafeStyle","^3R","^3H","~$goog.html.uncheckedconversions","^3K","^3F"]]],["^15","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^15","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3B","^3C","~$goog.dom.TagName","~$goog.dom.tags","^3P","^3V","~$goog.html.SafeStyleSheet","^3R","^3H","^3Q","^3I","^3J","~$goog.labs.userAgent.browser","^3E","^3K","^3L","^3F"]]],["^15","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3E"]]],["^15","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3B"]]],["^15","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^15","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3B","^3C","^O","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^15","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T"]]],["^15","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T"]]],["^15","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",[]]],["^15","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3B","^3E"]]],["^15","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^S","^O","~$goog.string.StringBuffer"]]],["^15","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","~$goog.dom.safe","^3W","^3K","^3F"]]],["^15","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T"]]],["^15","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3F"]]],["^15","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T"]]],["^15","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3B","^3C","^3T","~$goog.math"]]],["^15","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3C","^3U","^3P","^3V","^40","^3R","^3H","^3K","^3F","^3I"]]],["^15","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T"]]],["^15","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","~$goog.math.Long","~$goog.math.Integer","^O","^3E","^3B","~$goog.Uri","^49"]]],["^15","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3K","^3L","^3Q","^3C"]]],["^15","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3K","^3V","^3L","^3B","^3E","^3C","^3F"]]],["^15","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3N"]]],["^15","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3C","^O"]]],["^15","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^3=",["^ ","^3>",null,"^3?",["^H",[]],"^3@",["^T","^3C","^3L"]]]]],"~:clj-info",["^ ","jar:file:/Users/leoware/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1631463305000,"jar:file:/Users/leoware/.m2/repository/binaryage/devtools/1.0.3/devtools-1.0.3.jar!/devtools/defaults.clj",1631463311000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1631463305000,"jar:file:/Users/leoware/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1631463305000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","cljs/stacktrace.cljc","^7",9,"^8",5,"^9",9,"^:",20],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^O","^Q","^Q","^R","^Q","^S","^S","^T","^T"],"^U",["^H",["^V"]],"~:shadow/js-access-global",["^H",["RegExp","Error","parseInt"]],"^W",null,"~:defs",["^ ","~$output-directory",["^ ","~:protocol-inline",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",53,"^8",7,"^9",53,"^:",23,"~:arglists",["^Z",["~$quote",["^Z",[["~$opts"]]]]]],"^I","^2[","^6","cljs/stacktrace.cljc","^:",23,"~:method-params",["^Z",[["^58"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^8",1,"~:variadic?",false,"^7",53,"~:ret-tag",["^H",["~$any","^R"]],"^9",53,"~:max-fixed-arity",1,"~:fn-var",true,"^56",["^Z",["^57",["^Z",[["^58"]]]]]],"~$ends-with?",["^ ","^55",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",43,"^8",7,"^9",43,"^:",17,"^56",["^Z",["^57",["^Z",[["~$s0","~$s1"]]]]],"~:tag","~$boolean"],"^I","^24","^6","cljs/stacktrace.cljc","^:",17,"^59",["^Z",[["^5B","^5C"]]],"^5:",null,"^5;",["^Z",[null,null]],"^8",1,"^5<",false,"^7",43,"^5=","^5E","^9",43,"^5?",2,"^5D","^5E","^5@",true,"^56",["^Z",["^57",["^Z",[["^5B","^5C"]]]]]],"~$starts-with?",["^ ","^55",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",37,"^8",7,"^9",37,"^:",19,"^56",["^Z",["^57",["^Z",[["^5B","^5C"]]]]],"^5D","^5E"],"^I","^1A","^6","cljs/stacktrace.cljc","^:",19,"^59",["^Z",[["^5B","^5C"]]],"^5:",null,"^5;",["^Z",[null,null]],"^8",1,"^5<",false,"^7",37,"^5=","^5E","^9",37,"^5?",2,"^5D","^5E","^5@",true,"^56",["^Z",["^57",["^Z",[["^5B","^5C"]]]]]],"~$remove-ext",["^ ","^55",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",443,"^8",7,"^9",443,"^:",17,"^56",["^Z",["^57",["^Z",[["~$file"]]]]]],"^I","^37","^6","cljs/stacktrace.cljc","^:",17,"^59",["^Z",[["^5H"]]],"^5:",null,"^5;",["^Z",[null,null]],"^8",1,"^5<",false,"^7",443,"^5=","^R","^9",443,"^5?",1,"^5@",true,"^56",["^Z",["^57",["^Z",[["^5H"]]]]]],"~$string->regex",["^ ","^55",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",49,"^8",7,"^9",49,"^:",20,"^56",["^Z",["^57",["^Z",[["~$s"]]]]]],"^I","^2U","^6","cljs/stacktrace.cljc","^:",20,"^59",["^Z",[["~$s"]]],"^5:",null,"^5;",["^Z",[null,null]],"^8",1,"^5<",false,"^7",49,"^5=","^1K","^9",49,"^5?",1,"^5@",true,"^56",["^Z",["^57",["^Z",[["~$s"]]]]]],"~$safari-st-el->frame",["^ ","^55",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",212,"^8",7,"^9",212,"^:",26,"^56",["^Z",["^57",["^Z",[["~$repl-env","~$st-el","^58"]]]]]],"^I","^1D","^6","cljs/stacktrace.cljc","^:",26,"^59",["^Z",[["^5K","^5L","^58"]]],"^5:",null,"^5;",["^Z",[null,null]],"^8",1,"^5<",false,"^7",212,"^5=",["^H",["~$cljs.core/IMap","~$clj-nil"]],"^9",212,"^5?",3,"^5@",true,"^56",["^Z",["^57",["^Z",[["^5K","^5L","^58"]]]]]],"~$mapped-frame",["^ ","^55",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",471,"^8",7,"^9",471,"^:",19,"^56",["^Z",["^57",["^Z",[[["^ ","~:keys",["~$function","^5H","~$line","~$column"]],"~$sms","^58"]]]]],"~:doc","Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame."],"^I","^1H","^6","cljs/stacktrace.cljc","^:",19,"^59",["^Z",[["~$p__26763","^5T","^58"]]],"^5:",null,"^5;",["^Z",[null,null]],"^8",1,"^5<",false,"^7",471,"^5=","^5M","^9",471,"^5?",3,"^5@",true,"^56",["^Z",["^57",["^Z",[[["^ ","^5P",["^5Q","^5H","^5R","^5S"]],"^5T","^58"]]]]],"^5U","Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame."],"~$firefox-st-el->frame",["^ ","^55",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",306,"^8",7,"^9",306,"^:",27,"^56",["^Z",["^57",["^Z",[["^5K","^5L","^58"]]]]]],"^I","^1J","^6","cljs/stacktrace.cljc","^:",27,"^59",["^Z",[["^5K","^5L","^58"]]],"^5:",null,"^5;",["^Z",[null,null]],"^8",1,"^5<",false,"^7",306,"^5=",["^H",["^5M","^5N"]],"^9",306,"^5?",3,"^5@",true,"^56",["^Z",["^57",["^Z",[["^5K","^5L","^58"]]]]]],"~$firefox-clean-function",["^ ","^55",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",294,"^8",7,"^9",294,"^:",29,"^56",["^Z",["^57",["^Z",[["~$f"]]]]]],"^I","^1Z","^6","cljs/stacktrace.cljc","^:",29,"^59",["^Z",[["~$f"]]],"^5:",null,"^5;",["^Z",[null,null]],"^8",1,"^5<",false,"^7",294,"^5=","^R","^9",294,"^5?",1,"^5@",true,"^56",["^Z",["^57",["^Z",[["~$f"]]]]]],"~$chrome-st-el->frame",["^ ","^55",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",111,"^8",7,"^9",111,"^:",26,"^56",["^Z",["^57",["^Z",[["^5K","^5L","^58"]]]]]],"^I","^2H","^6","cljs/stacktrace.cljc","^:",26,"^59",["^Z",[["^5K","^5L","^58"]]],"^5:",null,"^5;",["^Z",[null,null]],"^8",1,"^5<",false,"^7",111,"^5=",["^H",["^5M","^5N"]],"^9",111,"^5?",3,"^5@",true,"^56",["^Z",["^57",["^Z",[["^5K","^5L","^58"]]]]]],"~$mapped-line-column-call",["^ ","^55",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",450,"^8",7,"^9",450,"^:",30,"^56",["^Z",["^57",["^Z",[["^5T","^5H","^5R","^5S"]]]]],"^5U","Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called."],"^I","^2B","^6","cljs/stacktrace.cljc","^:",30,"^59",["^Z",[["^5T","^5H","^5R","^5S"]]],"^5:",null,"^5;",["^Z",[null,null]],"^8",1,"^5<",false,"^7",450,"^9",450,"^5?",4,"^5@",true,"^56",["^Z",["^57",["^Z",[["^5T","^5H","^5R","^5S"]]]]],"^5U","Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called."],"~$mapped-stacktrace-str",["^ ","^55",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",528,"^8",7,"^9",528,"^:",28,"^56",["^Z",["^57",["^Z",[["~$stacktrace","^5T"],["^60","^5T","^58"]]]]],"^5U","Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace.","~:top-fn",["^ ","^5<",false,"~:fixed-arity",3,"^5?",3,"^59",[["^60","^5T"],["^60","^5T","^58"]],"^56",["^Z",[["^60","^5T"],["^60","^5T","^58"]]],"^5;",["^Z",[null,null]]]],"^I","^2>","^6","cljs/stacktrace.cljc","^:",28,"^61",["^ ","^5<",false,"^62",3,"^5?",3,"^59",[["^60","^5T"],["^60","^5T","^58"]],"^56",["^Z",[["^60","^5T"],["^60","^5T","^58"]]],"^5;",["^Z",[null,null]]],"^59",[["^60","^5T"],["^60","^5T","^58"]],"^5:",null,"^62",3,"^5;",["^Z",[null,null]],"^8",1,"^5<",false,"~:methods",[["^ ","^62",2,"^5<",false,"^5D","^5>"],["^ ","^62",3,"^5<",false,"^5D","^R"]],"^7",528,"^9",528,"^5?",3,"^5@",true,"^56",["^Z",[["^60","^5T"],["^60","^5T","^58"]]],"^5U","Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace."],"~$mapped-stacktrace",["^ ","^55",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",491,"^8",7,"^9",491,"^:",24,"^56",["^Z",["^57",["^Z",[["^60","^5T"],["^60","^5T","^58"]]]]],"^5U","Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath.","^61",["^ ","^5<",false,"^62",3,"^5?",3,"^59",[["^60","^5T"],["^60","^5T","^58"]],"^56",["^Z",[["^60","^5T"],["^60","^5T","^58"]]],"^5;",["^Z",[null,null]]]],"^I","^2I","^6","cljs/stacktrace.cljc","^:",24,"^61",["^ ","^5<",false,"^62",3,"^5?",3,"^59",[["^60","^5T"],["^60","^5T","^58"]],"^56",["^Z",[["^60","^5T"],["^60","^5T","^58"]]],"^5;",["^Z",[null,null]]],"^59",[["^60","^5T"],["^60","^5T","^58"]],"^5:",null,"^62",3,"^5;",["^Z",[null,null]],"^8",1,"^5<",false,"^63",[["^ ","^62",2,"^5<",false,"^5D","^5>"],["^ ","^62",3,"^5<",false]],"^7",491,"^9",491,"^5?",3,"^5@",true,"^56",["^Z",[["^60","^5T"],["^60","^5T","^58"]]],"^5U","Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath."],"~$parse-stacktrace",["^ ","^5",["^ ","^6","cljs/stacktrace.cljc","^7",17,"^8",11,"^9",17,"^:",27,"^5U","Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str"],"^I","^1M","^6","cljs/stacktrace.cljc","^:",27,"^8",1,"^7",17,"^9",17,"^5D","^1G","^5U","Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str"],"~$parse-int",["^ ","^55",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",33,"^8",7,"^9",33,"^:",16,"^56",["^Z",["^57",["^Z",[["~$s"]]]]]],"^I","^1L","^6","cljs/stacktrace.cljc","^:",16,"^59",["^Z",[["~$s"]]],"^5:",null,"^5;",["^Z",[null,null]],"^8",1,"^5<",false,"^7",33,"^5=","~$js","^9",33,"^5?",1,"^5@",true,"^56",["^Z",["^57",["^Z",[["~$s"]]]]]],"~$parse-file",["^ ","^55",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",81,"^8",7,"^9",81,"^:",17,"^56",["^Z",["^57",["^Z",[[["^ ","^5P",["~$host","~$host-port","~$port"],"^10","^5K"],"^5H",["^ ","^5P",["~$asset-path"],"^10","^58"]]]]]],"^5U","Given a browser file url convert it into a relative path that can be used\n   to locate the original source."],"^I","^2M","^6","cljs/stacktrace.cljc","^:",17,"^59",["^Z",[["~$p__26581","^5H","~$p__26582"]]],"^5:",null,"^5;",["^Z",[null,null]],"^8",1,"^5<",false,"^7",81,"^5=","^R","^9",81,"^5?",3,"^5@",true,"^56",["^Z",["^57",["^Z",[[["^ ","^5P",["^69","^6:","^6;"],"^10","^5K"],"^5H",["^ ","^5P",["^6<"],"^10","^58"]]]]]],"^5U","Given a browser file url convert it into a relative path that can be used\n   to locate the original source."],"~$parse-file-line-column",["^ ","^55",null,"^5",["^ ","^6","cljs/stacktrace.cljc","^7",60,"^8",7,"^9",60,"^:",29,"^56",["^Z",["^57",["^Z",[["~$flc"]]]]]],"^I","^2T","^6","cljs/stacktrace.cljc","^:",29,"^59",["^Z",[["^6@"]]],"^5:",null,"^5;",["^Z",[null,null]],"^8",1,"^5<",false,"^7",60,"^5=","~$cljs.core/IVector","^9",60,"^5?",1,"^5@",true,"^56",["^Z",["^57",["^Z",[["^6@"]]]]]]],"^X",["^ ","^S","^S"],"~:cljs.analyzer/constants",["^ ","^U",["^H",["~:asset-root","~:output-dir","~:ua-product","~:safari","~:else","~:call","~:default","^I","^6","~:nodejs","~:type","~:port","~:function","^8","~:firefox","~:reason","~:asset-path","~:host","~:parse-stacktrace","^7","~:chrome","~:relativize-url","~:col","~:hierarchy","~:host-port"]],"~:order",["^6V","^6E","^6I","^6D","^6Q","^6W","^6L","^6P","^6C","^6K","^6O","^6R","^6T","^6","^6M","^7","^8","^6S","^6F","^6G","^6N","^6J","^6U","^I","^6H"]],"^11",["^ ","^V",["^H",[]]],"^12",["^ "],"^13",["^T","^S","^O","^Q"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^3<",[["^6[","~:static-fns"],true,["^6[","~:shadow-tweaks"],null,["^6[","~:source-map-inline"],null,["^6[","~:elide-asserts"],false,["^6[","~:optimize-constants"],null,["^6[","^18"],null,["^6[","~:external-config"],null,["^6[","~:tooling-config"],null,["^6[","~:emit-constants"],null,["^6[","~:load-tests"],null,["^6[","~:form-size-threshold"],null,["^6[","~:data-readers"],null,["^6[","~:infer-externs"],"~:auto",["^6[","^1:"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6[","~:fn-invoke-direct"],null,["^6[","~:source-map"],"/dev/null"]]]